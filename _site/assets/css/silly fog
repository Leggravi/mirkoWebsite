<!DOCTYPE html>
<html lang="de">
<head>
  <!-- Begin Jekyll SEO tag v2.8.0 -->
<title>Mirko in Brasilien</title>
<meta name="generator" content="Jekyll v3.10.0" />
<meta property="og:title" content="Mirko in Brasilien" />
<meta name="author" content="Leggravi" />
<meta property="og:locale" content="de_DE" />
<meta name="description" content="Mirko in Brasilien - Ein Blog √ºber meine Erfahrungen und Erlebnisse w√§hrend meines Kurzzeiteinsatzes in der Missionsstation Alves de Barros in Brasilien." />
<meta property="og:description" content="Mirko in Brasilien - Ein Blog √ºber meine Erfahrungen und Erlebnisse w√§hrend meines Kurzzeiteinsatzes in der Missionsstation Alves de Barros in Brasilien." />
<link rel="canonical" href="http://localhost:4000/assets/css/silly%20fog" />
<meta property="og:url" content="http://localhost:4000/assets/css/silly%20fog" />
<meta property="og:site_name" content="Mirko in Brasilien" />
<meta property="og:image" content="http://localhost:4000/assets/img/seo.jpg" />
<meta property="og:type" content="website" />
<meta name="twitter:card" content="summary_large_image" />
<meta property="twitter:image" content="http://localhost:4000/assets/img/seo.jpg" />
<meta property="twitter:title" content="Mirko in Brasilien" />
<script type="application/ld+json">
{"@context":"https://schema.org","@type":"WebPage","author":{"@type":"Person","name":"Leggravi"},"description":"Mirko in Brasilien - Ein Blog √ºber meine Erfahrungen und Erlebnisse w√§hrend meines Kurzzeiteinsatzes in der Missionsstation Alves de Barros in Brasilien.","headline":"Mirko in Brasilien","image":"http://localhost:4000/assets/img/seo.jpg","url":"http://localhost:4000/assets/css/silly%20fog"}</script>
<!-- End Jekyll SEO tag -->


  <!-- Google tag (gtag.js) -->
<script async src="https://www.googletagmanager.com/gtag/js?id=G-XNR3TD2Z94"></script>
<script>
  window.dataLayer = window.dataLayer || [];
  function gtag(){dataLayer.push(arguments);}
  gtag('js', new Date());

  gtag('config', 'G-XNR3TD2Z94');
</script>
  
  <meta charset="UTF-8">
  <title>
  Mirko in Brasilien
</title>
  <meta name="viewport" content="width=device-width, initial-scale=1.0">

  

  <meta name="theme-color" content="#1fa2ff">
 <script>
  function switchTheme(theme) {
    document.body.setAttribute('data-theme', theme);
    localStorage.setItem('theme', theme);
    if (window.handleStarfieldTheme) handleStarfieldTheme();
    if (window.handlePollenTheme) handlePollenTheme();
  }

  window.addEventListener('DOMContentLoaded', () => {
    const saved = localStorage.getItem('theme');
    if (saved) {
      document.body.setAttribute('data-theme', saved);
    } else {
      document.body.setAttribute('data-theme', 'light');
    }
    if (window.handleStarfieldTheme) handleStarfieldTheme();
    if (window.handlePollenTheme) handlePollenTheme();
  });
</script>

  <link rel="stylesheet" href="/assets/css/style.css">

<link rel="icon" href="/assets/favicon.svg" type="image/svg+xml">
<!-- Fallback f√ºr alte Browser -->
<link rel="alternate icon" href="/assets/favicon.ico" type="image/x-icon">

<link rel="manifest" href="/manifest.json">

<!--<script src="https://cdn.onesignal.com/sdks/web/v16/OneSignalSDK.page.js" defer></script>
<script>
  window.OneSignalDeferred = window.OneSignalDeferred || [];
  OneSignalDeferred.push(async function(OneSignal) {
    await OneSignal.init({
      appId: "dbff754e-f042-45ca-a0a1-ccfb8ed9cf4d",
      safari_web_id: "web.onesignal.auto.514888af-c9d7-482b-90d4-9de98d872128",
      notifyButton: {
        enable: true,
      },
      allowLocalhostAsSecureOrigin: true,
    });
  });
</script> -->


<script>
  if ('serviceWorker' in navigator) {
    navigator.serviceWorker.register('/service-worker.js')
      .then(reg => console.log("SW registered:", reg.scope))
      .catch(err => console.error("SW registration failed:", err));
  }
</script>



  
</head>
<body>
  <!-- STERNENHIMMEL CANVAS (nur f√ºr Game Theme sichtbar) -->
<canvas class="starfield-bg"></canvas>
<canvas class="forest-pollen"></canvas>
<div class="forest-rays"></div>
<div class="forest-rays2">
  <div class="ray ray1"></div>
  <div class="ray ray2"></div>
  <div class="ray ray3"></div>
  <div class="ray ray4"></div>
</div>


  <div class="topbar">
    <div class="topbar-nav">
      <a href="/">üè†</a>
      <a href="/blog/">‚úçÔ∏è</a>
    </div>
    <div class="topbar-themes theme-switcher" role="group" aria-label="Theme Switcher">
      <button title="Light" onclick="switchTheme('light')" aria-label="Light"><span>‚òÄÔ∏è</span></button>
      <button title="Dark" onclick="switchTheme('dark')" aria-label="Dark"><span>üåë</span></button>
      <button title="Blue" onclick="switchTheme('blue')" aria-label="Blue"><span>üîµ</span></button>
      <button title="Forest" onclick="switchTheme('forest')" aria-label="Forest"><span>üå≤</span></button>
      <button title="Game" onclick="switchTheme('game')" aria-label="Game"><span>üïπÔ∏è</span></button>
    </div>
  </div>
  <g class="wrapper">
    <aside class="sidebar">
      <img src="/assets/img/mirko.jpg" alt="Mirko" class="profile-img">
      <h2>Navigation</h2>
      <ul>
        <li><a href="/">üè† Start</a></li>
        <li><a href="/blog/">‚úçÔ∏è Blog</a></li>
      </ul>

      <h3 style="margin-top:2em;">Thema wechseln</h3>
      <div class="theme-switcher" role="group" aria-label="Theme Switcher">
        <button title="Light" onclick="switchTheme('light')" aria-label="Light"><span>‚òÄÔ∏è</span></button>
        <button title="Dark" onclick="switchTheme('dark')" aria-label="Dark"><span>üåë</span></button>
        <button title="Blue" onclick="switchTheme('blue')" aria-label="Blue"><span>üîµ</span></button>
        <button title="Forest" onclick="switchTheme('forest')" aria-label="Forest"><span>üå≤</span></button>
        <button title="Game" onclick="switchTheme('game')" aria-label="Game"><span>üïπÔ∏è</span></button>
      </div>
      <div style="height:80px;"></div> <!-- Abstandshalter -->
      <p></p>

    </aside>

    <main class="content">
      @import url('https://fonts.googleapis.com/css2?family=Roboto:wght@400;700&display=swap');
@import url('https://fonts.googleapis.com/css2?family=Montserrat:wght@400;700&display=swap');
@import url('https://fonts.googleapis.com/css2?family=Fira+Mono:wght@400;700&display=swap');
@import url('https://fonts.googleapis.com/css2?family=Quicksand:wght@400;700&display=swap');
@import url('https://fonts.googleapis.com/css2?family=Press+Start+2P&display=swap');
@import url('https://fonts.googleapis.com/css2?family=Indie+Flower&display=swap');
@import url('https://fonts.googleapis.com/css2?family=Cookie&display=swap');
//@import url('https://fonts.googleapis.com/css2?family=Press+Start+2P&family=Montserrat:wght@400;700&family=Quicksand:wght@400;700&family=Playfair+Display:ital,wght@1,700&display=swap');

@font-face {
  font-family: 'A Bug s Life';
  src: url('../fonts/A Bug s Life.ttf') format('truetype');
  font-weight: normal;
  font-style: normal; 
}

@font-face {
  font-family: 'Brightwater';
  src: url('../fonts/Brightwater.ttf') format('truetype');
  font-weight: normal;
  font-style: normal; 
}

@font-face {
  font-family: 'homespun';
  src: url('../fonts/homespun.ttf') format('truetype');
  font-weight: normal;
  font-style: normal; 
}

$dark-theme: (
  bg: linear-gradient(135deg, #232526 0%, #414345 100%),
  text: #eeeeee,
  link: #80cbc4,
  sidebar: #222222,
  btn-bg: #232526,
  btn-text: #eeeeee,
  btn-border: #80cbc4,
  btn-hover-bg: #414345,
  btn-hover-text: #80cbc4,
  btn-hover-border: #eeeeee,
  btn-shadow: rgba(0,0,0,0.3),
  btn-hover-shadow: rgba(0,0,0,0.5),
  font: 'Roboto', Arial: sans-serif
);

$light-theme: (
  bg: #f5f5f5,
  text: #222222,
  link: #1976d2,
  sidebar: #e0e0e0,
  btn-bg: #e0e0e0,
  btn-text: #222222,
  btn-border: #1976d2,
  btn-hover-bg: #1976d2,
  btn-hover-text: #fff,
  btn-hover-border: #222222,
  btn-shadow: rgba(0,0,0,0.1),
  btn-hover-shadow: rgba(0,0,0,0.2),
  font: 'Quicksand', Arial: sans-serif
);

$blue-theme: (
   bg: linear-gradient(135deg, #a0f7e0 0%, #3ed7c5 100%),
  text: #003c3c,
  link: #008b8b,
  sidebar: #6cd3bc,
  btn-bg: #4bc4b2,
  btn-text: #003c3c,
  btn-border: #008b8b,
  btn-hover-bg: #00c2a8,
  btn-hover-text: #ffffff,
  btn-hover-border: #ffffff,
  btn-shadow: rgba(0, 194, 168, 0.2),
  btn-hover-shadow: rgba(0, 194, 168, 0.4),
  font: 'Quicksand' ,
  heading-font-size: 1.5,
  heading-font: 'Brightwater',
  heading-weight: 400
);

$forest-theme: (
  bg: linear-gradient(135deg, #193821 0%, #3e7552 100%),
  background-color: #193821,
  bg-image: url("data:image/svg+xml,%3Csvg xmlns='http://www.w3.org/2000/svg' width='100' height='18' viewBox='0 0 100 18'%3E%3Cpath fill='%233e7552' fill-opacity='0.1' d='M61.82 18c3.47-1.45 6.86-3.78 11.3-7.34C78 6.76 80.34 5.1 83.87 3.42 88.56 1.16 93.75 0 100 0v6.16C98.76 6.05 97.43 6 96 6c-9.59 0-14.23 2.23-23.13 9.34-1.28 1.03-2.39 1.9-3.4 2.66h-7.65zm-23.64 0H22.52c-1-.76-2.1-1.63-3.4-2.66C11.57 9.3 7.08 6.78 0 6.16V0c6.25 0 11.44 1.16 16.14 3.42 3.53 1.7 5.87 3.35 10.73 7.24 4.45 3.56 7.84 5.9 11.31 7.34zM61.82 0h7.66a39.57 39.57 0 0 1-7.34 4.58C57.44 6.84 52.25 8 46 8S34.56 6.84 29.86 4.58A39.57 39.57 0 0 1 22.52 0h15.66C41.65 1.44 45.21 2 50 2c4.8 0 8.35-.56 11.82-2z'%3E%3C/path%3E%3C/svg%3E"),
  text: #e6f6e6,
  link: #89e49c,
  sidebar: #1f3c2a,
  btn-bg: #366849,
  btn-text: #e6f6e6,
  btn-border: #89e49c,
  btn-hover-bg: #4ac06b,
  btn-hover-text: #ffffff,
  btn-hover-border: #ffffff,
  btn-shadow: rgba(137, 231, 167, 0.2),
  btn-hover-shadow: rgba(137, 231, 167, 0.4),
  heading-font: 'A Bug s Life',
  //heading-font-size: 1.5,
  font: 'Indie Flower',
  heading-weight: 300
);

$game-theme: (
  bg: radial-gradient(ellipse at center, #373737 0%, #000 100%),
  text: #fff,
  link: #0ff,
  sidebar: #222,
  btn-bg: #0ff,
  btn-text: #111,
  btn-border: #0ff,
  btn-hover-bg: #0cc,
  btn-hover-text: #111,
  btn-hover-border: #0ff,
  btn-shadow: 0 0 8px #0ff,
  btn-hover-shadow: 0 0 16px #0ff,
  heading-font: 'Press Start 2P',
  font: 'homespun',
  heading-weight: 400
);

$themes: (
  light: $light-theme,
  dark: $dark-theme,
  blue: $blue-theme,
  forest: $forest-theme,
  game: $game-theme
);

@each $theme, $colors in $themes {
  body[data-theme="#{$theme}"] {
    background: map-get($colors, bg),
    map-get($colors, bg-image);
    @if map-has-key($colors, bg-image) {
      background-image: map-get($colors, bg-image);
      background-size: 220px auto;
      background-color: map-get($colors, background-color),
    }


    color: map-get($colors, text);

    font-family: map-get($colors, font); // Immer setzen!
    
    h1, h2, h3, h4 {
      font-family: map-get($colors, heading-font);
      font-weight: if(map-has-key($colors, heading-weight), map-get($colors, heading-weight), 900);
    }
    $heading-scale: if(map-has-key($colors, heading-font-size), map-get($colors, heading-font-size), 1);
      h1 {font-size: calc(2em * #{$heading-scale});}
      h2 {font-size: calc(1.6em * #{$heading-scale}); }
      h3 {font-size: calc(1.3em * #{$heading-scale}); }
      h4 {font-size: calc(1.1em * #{$heading-scale});}

      a {
        color: map-get($colors, link);
      }

    .sidebar {
      background: map-get($colors, sidebar);
    }

    .theme-switcher button {
      background: map-get($colors, btn-bg);
      color: map-get($colors, btn-text);
      border: 2px solid map-get($colors, btn-border);
      box-shadow: 0 2px 8px map-get($colors, btn-shadow);
      transition: background 0.2s, color 0.2s, box-shadow 0.2s, border-color 0.2s;
      outline: none;
      font-family: inherit;
    }

    .theme-switcher button:hover,
    .theme-switcher button:focus {
      background: map-get($colors, btn-hover-bg);
      color: map-get($colors, btn-hover-text);
      border-color: map-get($colors, btn-hover-border);
      box-shadow: 0 4px 16px map-get($colors, btn-hover-shadow);
      outline: 2px solid map-get($colors, btn-hover-border);
      outline-offset: 2px;
    }
  }
}
/*
.btn {
  font-family: inherit;
  padding: 0.6em 1.2em;
  border-radius: 8px;
  border: 2px solid;
  font-weight: bold;
  transition: all 0.2s ease;
  cursor: pointer;
  text-transform: uppercase;
  box-shadow: 0 4px 6px rgba(0,0,0,0.05);
}

@each $name, $theme in $themes {
  body[data-theme="#{$name}"] .btn {
    background-color: map-get($theme, btn-bg);
    color: map-get($theme, btn-text);
    border-color: map-get($theme, btn-border);
    box-shadow: 0 4px 6px map-get($theme, btn-shadow);

    &:hover {
      background-color: map-get($theme, btn-hover-bg);
      color: map-get($theme, btn-hover-text);
      border-color: map-get($theme, btn-hover-border);
      box-shadow: 0 6px 10px map-get($theme, btn-hover-shadow);
    }
  }
}
*/

body {
  font-family: sans-serif;
  margin: 0;
  padding: 0;
}

/*body {
  font-family: map-get($current-theme, font);
  color: map-get($current-theme, text);
  background: map-get($current-theme, bg);
}

h1, h2, h3, h4 {
  font-family: map-get($current-theme, heading-font);
  font-weight: 700;
}*/

.wrapper {
  display: flex;
  flex-direction: row;
  min-height: 100vh;
  position: relative;
  gap: 3em; // Abstand zwischen Sidebar, Content und TOC
}

.sidebar {
  width: 240px;
  padding: 2em 1.5em;
  flex-shrink: 0;
  background: #222222;
  position: fixed;
  left: 0;
  top: 0;
  bottom: 0;
  height: 100vh;
  overflow-y: auto;
  z-index: 10;
}

.profile-img {
  width: 100%;
  max-width: 200px;
  border-radius: 10px;
  display: block;
  margin-bottom: 1em;
}

.content {
  flex: 1 1 0;
  min-width: 0;
  margin-left: 260px;   // Platz f√ºr Sidebar
  margin-right: 260px;  // Platz f√ºr TOC
  padding: 3em 3em 3em;
  max-width: 800px;
  word-break: break-word;
  box-sizing: border-box;
}

/* Default Button Style (falls kein Theme gesetzt) */
.theme-switcher button {
  display: block;
  width: 100%;
  margin: 4px 0;
  padding: 8px 0;
  cursor: pointer;
  background: #222222;
  color: #eeeeee;
  border: 2px solid #80cbc4;
  border-radius: 6px;
  box-shadow: 0 2px 8px rgba(0,0,0,0.3);
  transition: background 0.2s, color 0.2s, box-shadow 0.2s, border-color 0.2s;
  outline: none;
}

.theme-switcher {
  display: flex;
  gap: 0.5em;
  justify-content: flex-start;
  margin-bottom: 1em;
}

.theme-switcher button {
  width: 2.2em;
  height: 2.2em;
  padding: 0;
  margin: 0;
  border-radius: 50%;
  font-size: 1.3em;
  display: flex;
  align-items: center;
  justify-content: center;
  background: transparent;
  border: none;
  box-shadow: none;
  cursor: pointer;
  opacity: 0.7;
  transition: opacity 0.2s, transform 0.2s;
  outline: none;
  position: relative;
}

.theme-switcher button:hover,
.theme-switcher button:focus {
  opacity: 1;
  transform: scale(1.15);
  outline: 2px solid currentColor;
  outline-offset: 2px;
}

.theme-switcher button span {
  pointer-events: none;
}

body[data-theme="game"] .theme-switcher button {
  font-family: 'Press Start 2P', cursive;
  font-size: 1.1em;
}

body[data-theme="game"] .theme-switcher button span {
  text-shadow: 0 0 4px #0ff, 1px 1px #222;
}

.theme-switcher button[aria-label="Light"] span { color: #f5c518; }
.theme-switcher button[aria-label="Dark"] span { color: #222; }
.theme-switcher button[aria-label="Blue"] span { color: #1fa2ff; }
.theme-switcher button[aria-label="Forest"] span { color: #4caf50; }
.theme-switcher button[aria-label="Game"] span { color: #0ff; }

.toc {
  position: fixed;
  right: 0;
  top: 0;
  width: 260px;
  height: 100vh;
  padding: 3em .5em;
  background: rgba(34,34,34,0.97);
  color: #eee;
  overflow-y: auto;
  z-index: 9;
  border-left: 2px solid #444;
}

.toc h3 {
  margin-top: 0;
  font-size: 1.1em;
  letter-spacing: 0.05em;
}

#toc-list {
  list-style: none;
  padding: 0;
  margin: 0;
}

#toc-list li {
  margin: 0.7em 0;
  transition: background 0.2s;
  border-radius: 4px;
}

#toc-list li.active > a {
  background: #444;
  color: #80cbc4;
  font-weight: bold;
  border-radius: 4px;
  padding: 0.4em 0.8em;
}

#toc-list li .toc-sublist {
  display: none;
  margin-left: 1em;
}

#toc-list li.open .toc-sublist {
  display: block;
}

#toc-list li .toc-toggle {
  cursor: pointer;
  margin-right: 0.3em;
  font-size: 0.9em;
  color: #80cbc4;
  user-select: none;
}

@each $name, $theme in $themes {
  body[data-theme="#{$name}"] {
    .toc {
      background: map-get($theme, sidebar);
      color: map-get($theme, text);
      border-left: 2px solid map-get($theme, link);
    }

    #toc-list li.active > a {
      background: lighten(map-get($theme, btn-hover-bg), 5%);
      color: map-get($theme, btn-hover-text);
    }

    #toc-list li .toc-toggle {
      color: map-get($theme, link);
    }
  }
}
.topbar {
  display: none;
} // finden

@media (max-width: 900px) {
  .sidebar {
    display: none;
  }

  @each $name, $theme in $themes {
    body[data-theme="#{$name}"] {
      .topbar {
        display: flex;
        justify-content: space-between;
        align-items: center;
        padding: 1em 1.5em;
        background: map-get($theme, sidebar);
        color: map-get($theme, text);
        position: sticky;
        top: 0;
        z-index: 100;
        box-shadow: 0 2px 8px map-get($theme, btn-shadow);
      }

      .topbar-nav a {
        color: map-get($theme, text);
        text-decoration: none;
        font-size: 1.5em;
        margin-right: 1em;
        transition: color 0.2s;
      }

      .topbar-nav a:last-child {
        margin-right: 0;
      }

      .topbar-nav a:hover {
        color: map-get($theme, btn-hover-text);
      }

      .topbar-themes {
        display: flex;
        gap: 0.5em;
      }
    }
  }
}


@media (max-width: 1100px) {
  .toc {
    display: none;
  }
  .content {
    margin-right: 0;
    max-width: 100vw;
  }
}

@media (max-width: 900px) {
  .sidebar {
    position: static;
    width: 100%;
    height: auto;
  }
  .content {
    margin-left: 0;
    padding-left: 2em;
    padding-right: 2em;
    max-width: 100vw;
  }
}

.notification-banner {
  font-family: sans-serif !important;
  color: #111 !important;
  border: 2px solid #2222;
}
.notification-banner a {
  color: #222 !important;
  text-decoration: underline;
  margin-left: 1em;
}
.notification-banner button {
  background: none;
  border: none;
  color: #222 !important;
  font-size: 1.2em;
  margin-left: 1em;
  cursor: pointer;
}
.notification-history {
  font-family: sans-serif !important;
  color: #222 !important;
}

// --- STERNENHIMMEL F√úR GAME THEME ---
// F√ºgt einen Canvas als Hintergrund ein, nur sichtbar im Game-Theme
body[data-theme="game"] .starfield-bg {
  position: fixed;
  inset: 0;
  width: 100vw;
  height: 100vh;
  z-index: 0;
  pointer-events: none;
  opacity: 0.7;
  transition: opacity 0.3s;
  // Optional: f√ºr dunkleren Effekt
  // filter: brightness(0.7);
}
body:not([data-theme="game"]) .starfield-bg {
  display: none !important;
}

// --- SCANLINE/GLITCH-EFFEKT F√úR GAME THEME ---
// F√ºgt Scanlines und einen leichten Glitch-Effekt √ºber den gesamten Hintergrund
body[data-theme="game"]::before {
  content: "";
  pointer-events: none;
  position: fixed;
  inset: 0;
  z-index: 1;
  opacity: 0.18;
  background: repeating-linear-gradient(
    to bottom,
    #fff 0px,
    #fff 2px,
    transparent 4px,
    transparent 8px
  );
  mix-blend-mode: overlay;
  animation: scanlines-glitch 2.5s infinite linear;
}
@keyframes scanlines-glitch {
  0% { transform: translateY(0); }
  100% { transform: translateY(15px); }
}

// Optional: Leichter Farbglitch
body[data-theme="game"]::after {
  content: "";
  pointer-events: none;
  position: fixed;
  inset: 0;
  z-index: 2;
  opacity: 0.07;
  background: linear-gradient(
    120deg,
    #0ff 0%,
    transparent 40%,
    #f0f 60%,
    transparent 100%
  );
  mix-blend-mode: lighten;
  animation: glitch-move 1s infinite alternate-reverse;
}
@keyframes glitch-move {
  10% { transform: translateX(30px) scaleY(1); }
  20% { transform: translateX(0px) scaleY(1.03); }
}

// ...existing code...

// --- LICHTSTRAHLEN F√úR FOREST THEME ---
body[data-theme="forest"] .forest-rays {
  pointer-events: none;
  position: fixed;
  inset: 0;
  z-index: 11;
  opacity: 0.35; // weniger sichtbar
  mix-blend-mode: lighten;
}

body[data-theme="forest"] .forest-rays .ray {
  position: absolute;
  top: 0;
  right: 0;
  transform-origin: top right;
  width: 60vw;
  height: 100vh;
  background: linear-gradient(
    100deg,
    rgba(255,255,200,0.00) 60%,
    rgba(255, 255, 96, 0.548) 80%,
    rgba(255,255,180,0.00) 100%
  );
  filter: blur(8px);
  opacity: 0.5;
  animation: ray-swing 8s ease-in-out infinite alternate;
}

body[data-theme="forest"] .forest-rays .ray.ray2 {
  width: 45vw;
  height: 90vh;
  animation-delay: 2s;
  opacity: 0.35;
  background: linear-gradient(
    110deg,
    rgba(255,255,200,0.00) 60%,
    rgba(255, 240, 106, 0.514) 80%,
    rgba(255,255,180,0.00) 100%
  );
}
body[data-theme="forest"] .forest-rays .ray.ray3 {
  width: 70vw;
  height: 80vh;
  animation-delay: 4s;
  opacity: 0.25;
  background: linear-gradient(
    120deg,
    rgba(255,255,200,0.00) 60%,
    rgba(247, 151, 27, 0.466) 80%,
    rgba(255,255,180,0.00) 100%
  );
}
body[data-theme="forest"] .forest-rays .ray.ray4 {
  width: 35vw;
  height: 100vh;
  animation-delay: 1s;
  opacity: 0.18;
  background: linear-gradient(
    95deg,
    rgba(255,255,200,0.00) 60%,
    rgba(255, 255, 18, 0.466) 80%,
    rgba(255,255,180,0.00) 100%
  );
}

@keyframes ray-swing {
  0%   { transform: rotate(10deg); }
  50%  { transform: rotate(-8deg); }
  100% { transform: rotate(10deg); }
}

// --- NEBEL/RAUCH F√úR FOREST THEME ---
body[data-theme="forest"] .forest-fog {
  pointer-events: none;
  position: fixed;
  inset: 0;
  z-index: 12;
  opacity: 0.6;
  mix-blend-mode: lighten;
}
body[data-theme="forest"] .forest-fog .fog {
  position: absolute;
  background: radial-gradient(ellipse at 50% 50%, rgba(255,255,255,0.15) 0%, rgba(255,255,255,0.07) 70%, transparent 100%);
  pointer-events: none;
  will-change: transform, opacity, filter;
  transition: opacity 0.8s;
}


@keyframes fog-move {
  0% { transform: translateX(0); }
  100% { transform: translateX(-130vw); }
}

// ...existing code...
    </main>
    <div class="toc">
      <h3>Inhalt</h3>
      <ul id="toc-list"></ul>
    </div>
  </g>

  
  <script>
  // NUR √úberschriften aus dem Content-Bereich f√ºr den TOC verwenden!
  const toc = document.getElementById("toc-list");
  const content = document.querySelector(".content");
  const headers = Array.from(content.querySelectorAll("h2, h3"));
  let h2Map = {};

  headers.forEach(el => {
    const id = el.id || el.textContent.trim().toLowerCase().replace(/\s+/g, "-");
    el.id = id;
    if (el.tagName === "H2") {
      const li = document.createElement("li");
      li.innerHTML = `<a href="#${id}">${el.textContent}</a>`;
      toc.appendChild(li);
      h2Map[id] = li;
    } else if (el.tagName === "H3") {
      // Finde das vorherige H2
      const prevH2 = headers.slice(0, headers.indexOf(el)).reverse().find(h => h.tagName === "H2");
      if (prevH2) {
        const h2Id = prevH2.id;
        const h2Li = h2Map[h2Id];
        let sublist = h2Li.querySelector('.toc-sublist');
        if (!sublist) {
          sublist = document.createElement('ul');
          sublist.className = 'toc-sublist';
          h2Li.appendChild(sublist);
          // Toggle-Button nur einmal pro H2
          const toggle = document.createElement('span');
          toggle.className = 'toc-toggle';
          toggle.textContent = '‚ñ∏';
          toggle.onclick = () => {
            h2Li.classList.toggle('open');
            toggle.textContent = h2Li.classList.contains('open') ? '‚ñæ' : '‚ñ∏';
          };
          h2Li.insertBefore(toggle, h2Li.firstChild);
        }
        const subli = document.createElement("li");
        subli.innerHTML = `<a href="#${id}">‚Ü≥ ${el.textContent}</a>`;
        sublist.appendChild(subli);
      }
    }
  });

  function markActiveTOC() {
    let activeId = null;
    headers.forEach(el => {
      const rect = el.getBoundingClientRect();
      if (rect.top < 120) activeId = el.id;
    });
    document.querySelectorAll('#toc-list a').forEach(a => {
      a.parentElement.classList.toggle('active', a.getAttribute('href').slice(1) === activeId);
    });
    // √ñffne die aktuelle H2-Gruppe
    document.querySelectorAll('#toc-list li').forEach(li => {
      if (li.querySelector('.active')) li.classList.add('open');
      else li.classList.remove('open');
      const toggle = li.querySelector('.toc-toggle');
      if (toggle) toggle.textContent = li.classList.contains('open') ? '‚ñæ' : '‚ñ∏';
    });
  }
  window.addEventListener('scroll', markActiveTOC);
  markActiveTOC();
  </script>
  <script>
  const originalTitle = document.title;
  let timeout;

  window.addEventListener('blur', () => {
    timeout = setTimeout(() => {
      document.title = "üëã Vermisst du mich?";
    }, 600000);
  });

  window.addEventListener('focus', () => {
    clearTimeout(timeout);
    document.title = originalTitle;
  });
</script>



<!--<button onclick="updateCache()">Cache erneuern</button>
<script>
  function updateCache() {
    if ('serviceWorker' in navigator && navigator.serviceWorker.controller) {
      navigator.serviceWorker.getRegistrations().then(regs => {
        for (let reg of regs) {
          reg.unregister().then(() => {
            window.location.reload();
          });
        }
      });
    }
  }
</script>-->


  <script>
function clearCache() {
  if ('serviceWorker' in navigator && navigator.serviceWorker.controller) {
    navigator.serviceWorker.controller.postMessage('clear-cache');
    alert('Cache wurde geleert! Seite wird neu geladen.');
    window.location.reload();
  }
}
</script>
  <div style="text-align:center; margin:2em 0;">
    <a href="/about/">‚ÑπÔ∏è Mehr Infos</a> |
    <a href="/spenden/">üí∏ Spenden</a> 
  </div>

<script src="/assets/js/notifications.js"></script>
<script>
function getCookie(name) {
  const match = document.cookie.match(new RegExp('(^| )' + name + '=([^;]+)'));
  return match ? decodeURIComponent(match[2]) : "";
}
function setCookie(name, value, days) {
  const expires = new Date(Date.now() + days*864e5).toUTCString();
  document.cookie = name + "=" + encodeURIComponent(value) + ";path=/;expires=" + expires;
}

// Typen mit Farbe und Dauer
const typeStyles = {
  info:    { color: "#1fa2ff", duration: 0 },
  success: { color: "#4caf50", duration: 4000 },
  warning: { color: "#ff9800", duration: 6000 },
  error:   { color: "#e53935", duration: 8000 }
};

const seen = getCookie("seenNotifications") ? getCookie("seenNotifications").split(",") : [];
const allNotes = window.NOTIFICATIONS || [];
const newNotes = allNotes.filter(n => !seen.includes(n.id));

// Zeige alle neuen Nachrichten als Banner untereinander
newNotes.forEach(n => {
  const style = typeStyles[n.type] || typeStyles.info;
  const div = document.createElement("div");
  div.className = "notification-banner";
  div.innerHTML = `<span>${n.message}</span> <a href="/${n.url}">Ansehen</a> <button onclick="this.parentElement.remove()">√ó</button>`;
  div.style = `
    position:fixed;left:50%;transform:translateX(-50%);
    background:${style.color};color:#111;font-weight:bold;
    padding:1em 2em;border-radius:1em;z-index:9999;
    box-shadow:0 2px 8px #0002;
    font-family:sans-serif;
    bottom:${2 + 4 * Array.from(document.querySelectorAll('.notification-banner')).length}em;
    margin-bottom:1em;
  `;
  document.body.appendChild(div);
  if (style.duration > 0) {
    setTimeout(() => div.remove(), style.duration);
  }
});

// Nach Anzeige als gesehen speichern
if (newNotes.length) {
  setCookie("seenNotifications", seen.concat(newNotes.map(n=>n.id)).join(","), 365);
}
</script>
<script>
// --- STERNENHIMMEL ANIMATION MIT PARALLAX UND BLINKEN ---

let starfieldAnimationId = null;
let starfieldActive = false;
let lastScrollY = window.scrollY;

function startStarfield() {
  const canvas = document.querySelector('.starfield-bg');
  if (!canvas) return;
  const ctx = canvas.getContext('2d');
  let w = window.innerWidth, h = window.innerHeight;
  canvas.width = w;
  canvas.height = h;

  // Parallax-Faktor (0.3 = 30% der Scrollgeschwindigkeit)
  const PARALLAX = 0.3;

  // Sterne erzeugen
  const STAR_COUNT = 120;
  function newStar() {
    return {
      x: Math.random() * w,
      y: Math.random() * h,
      r: Math.random() * 1.2 + 0.3,
      blink: Math.random() * Math.PI * .1,
      speed: Math.random() * 0.2 + 0.15,
      life: Math.random() * 1.5 + 0.5, // Sekunden sichtbar
      age: 0
    };
  }
  let stars = Array.from({length: STAR_COUNT}, newStar);

  let lastTime = performance.now();

  function draw(now) {
    if (!starfieldActive) return;
    const dt = (now - lastTime) / 1000;
    lastTime = now;

    ctx.clearRect(0, 0, w, h);

    // Parallax-Offset berechnen
    const scrollY = window.scrollY;
    const parallaxOffset = scrollY * PARALLAX;

    for (let i = 0; i < stars.length; ++i) {
      let s = stars[i];
      s.age += dt;
      s.blink += s.speed * 0.25 + Math.random() * .3;
      // Wenn Lebensdauer vorbei: neuen Stern erzeugen
      if (s.age > s.life) {
        stars[i] = newStar();
        stars[i].y += parallaxOffset; // damit neue Sterne nicht "springen"
        continue;
      }
      // Alpha: schnelles Blinken
      const blinkAlpha = 0.3 + 0.7 * Math.abs(Math.sin(s.blink * 2));
      // Fade-in/out am Lebensanfang/-ende
      let fade = 1;
      if (s.age < 0.2) fade = s.age / 0.2;
      if (s.life - s.age < 0.2) fade = (s.life - s.age) / 0.2;
      const alpha = blinkAlpha * Math.max(0, fade);

      ctx.beginPath();
      ctx.arc(s.x, s.y - parallaxOffset, s.r, 0, 2 * Math.PI);
      ctx.fillStyle = `rgba(255,255,255,${alpha})`;
      ctx.shadowColor = "#0ff";
      ctx.shadowBlur = 8 * alpha;
      ctx.fill();
      ctx.shadowBlur = 0;
    }
    starfieldAnimationId = requestAnimationFrame(draw);
  }

  starfieldActive = true;
  lastTime = performance.now();
  draw(lastTime);

  function resize() {
    w = window.innerWidth;
    h = window.innerHeight;
    canvas.width = w;
    canvas.height = h;
    // Sterne neu verteilen
    stars = Array.from({length: STAR_COUNT}, newStar);
  }
  window.addEventListener('resize', resize);

  window.addEventListener('scroll', () => {
    // Kein Neuzeichnen n√∂tig, da draw() sowieso l√§uft und scrollY abfragt
  });
}

function stopStarfield() {
  starfieldActive = false;
  if (starfieldAnimationId) {
    cancelAnimationFrame(starfieldAnimationId);
    starfieldAnimationId = null;
  }
  const canvas = document.querySelector('.starfield-bg');
  if (canvas) {
    const ctx = canvas.getContext('2d');
    ctx && ctx.clearRect(0, 0, canvas.width, canvas.height);
  }
}

function handleStarfieldTheme() {
  const body = document.body;
  const canvas = document.querySelector('.starfield-bg');
  if (body.getAttribute('data-theme') === 'game') {
    canvas && (canvas.style.display = '');
    stopStarfield(); // Falls noch eine alte Animation l√§uft
    startStarfield();
  } else {
    stopStarfield();
    canvas && (canvas.style.display = 'none');
  }
}

// Theme-Wechsel erkennen (auch bei Button-Klicks)
document.addEventListener('DOMContentLoaded', handleStarfieldTheme);
const origSwitchTheme = window.switchTheme;
window.switchTheme = function(theme) {
  origSwitchTheme(theme);
  setTimeout(handleStarfieldTheme, 10); // Nach Attribut-Update
};
</script>
<script>
// --- POLLENPARTIKEL F√úR FOREST THEME ---
let pollenAnimId = null;
let pollenActive = false;

function startPollen() {
  const canvas = document.querySelector('.forest-pollen');
  if (!canvas) return;
  const ctx = canvas.getContext('2d');
  let w = window.innerWidth, h = window.innerHeight;
  canvas.width = w; canvas.height = h;

  const PARALLAX = .5;
  const COUNT = 40;
  function newPollen() {
    return {
      x: Math.random()*w,
      y: Math.random()*h,
      r: Math.random()*3.5+0.5,
      dx: (Math.random()-0.5)*0.43,
      dy: Math.random()*0.38-0.13,
      alpha: Math.random()*0.3+0.2,
      life: Math.random()*2+3,
      age: 0
      
    };
  }
  let pollen = Array.from({length: COUNT}, newPollen);

  let lastTime = performance.now();

  function draw(now) {
    if (!pollenActive) return;
    const dt = (now - lastTime) / 1000;
    lastTime = now;

    ctx.clearRect(0,0,w,h);

    // Parallax-Offset
    const scrollY = window.scrollY;
    const parallaxOffset = scrollY * PARALLAX;

    for (let i = 0; i < pollen.length; ++i) {
      let p = pollen[i];
      p.age += dt;
      if (p.age > p.life) {
        pollen[i] = newPollen();
        pollen[i].y += parallaxOffset;
        continue;
      }
      // Fade-in/out
      let fade = 1;
      if (p.age < 1) fade = p.age ;
      if (p.life - p.age < 1) fade = (p.life - p.age) ;
      const alpha = p.alpha * Math.max(0, fade);

      ctx.beginPath();
      ctx.arc(p.x, p.y - parallaxOffset, p.r, 0, 2*Math.PI);
      ctx.fillStyle = `rgba(255,255,200,${alpha})`;
      ctx.shadowColor = "#fff";
      ctx.shadowBlur = 4;
      ctx.fill();
      ctx.shadowBlur = 0;
      p.x += p.dx; p.y += p.dy;
      //if (p.x<0) p.x=w; if (p.x>w) p.x=0;
      //if (p.y>h) { p.y=0; p.x=Math.random()*w; }
    }
    pollenAnimId = requestAnimationFrame(draw);
  }

  pollenActive = true;
  lastTime = performance.now();
  draw(lastTime);

  function resize() {
    w = window.innerWidth; h = window.innerHeight;
    canvas.width = w; canvas.height = h;
    pollen = Array.from({length: COUNT}, newPollen);
  }
  window.addEventListener('resize', resize);
}

function stopPollen() {
  pollenActive = false;
  if (pollenAnimId) cancelAnimationFrame(pollenAnimId);
  pollenAnimId = null;
  const canvas = document.querySelector('.forest-pollen');
  if (canvas) canvas.getContext('2d').clearRect(0,0,canvas.width,canvas.height);
}

function handlePollenTheme() {
  const body = document.body, canvas = document.querySelector('.forest-pollen');
  if (body.getAttribute('data-theme') === 'forest') {
    canvas && (canvas.style.display = '');
    stopPollen(); startPollen();
  } else {
    stopPollen(); canvas && (canvas.style.display = 'none');
  }
}

// Theme-Wechsel erkennen (wie bei Sternenhimmel)
document.querySelectorAll('a[href$="feed.xml"]').forEach(el => {
  el.href = "https://forms.gle/kDLjBrFRAX2mfBYA9"; // neuer Link
  el.textContent = "via E-mail";          // neuer Text
  el.target = "_blank";                             // optional: in neuem Tab √∂ffnen
});

</script>

</body>
</html>

